{"version":3,"sources":["api/index.js","component/Cards/Cards.jsx","component/Chart/Chart.jsx","component/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js"],"names":["fetchData","a","axios","get","data","modifieData","confirmed","recovered","deaths","lastUpdate","Cards","covidData","className","Grid","container","justify","spacing","item","component","Card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","saperator","Date","toDateString","varient","Chart","CountryPicker","App","state","covid","fatchData","this","setState","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6VAsBeA,EAlBA,uCAAG,gCAAAC,EAAA,+EAGWC,IAAMC,IALzB,kCAEQ,uBAGHC,EAHG,EAGHA,KAEDC,EAAY,CACdC,UAAUF,EAAKE,UACfC,UAAUH,EAAKG,UACfC,OAAOJ,EAAKI,OACZC,WAAWL,EAAKK,YATV,kBAWHJ,GAXG,yFAAH,qD,yDC2CAK,EA1CF,SAAC,GAAuD,IAAD,IAArDC,UAAWL,EAA0C,EAA1CA,UAAUC,EAAgC,EAAhCA,UAAUC,EAAsB,EAAtBA,OAAOC,EAAe,EAAfA,WACjD,OAAIH,EAKA,yBAAKM,UAAU,aACX,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,GACtC,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CAAUC,MAAO,EAAGC,IAAKpB,EAAUqB,MAAOC,SAAU,IAAKC,UAAW,OAExE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAkB,IAAIQ,KAAKrB,GAAYsB,gBACzD,kBAACV,EAAA,EAAD,CAAaW,QAAQ,SAArB,uCAIR,kBAACnB,EAAA,EAAD,CAAMI,MAAI,EAACC,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAAM,kBAAC,IAAD,CAAUC,MAAO,EAAGC,IAAKnB,EAAUoB,MAAOC,SAAU,IAAKC,UAAW,MAA9F,KACA,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAkB,IAAIQ,KAAKrB,GAAYsB,gBACzD,kBAACV,EAAA,EAAD,CAAaW,QAAQ,SAArB,uCAIR,kBAACnB,EAAA,EAAD,CAAMI,MAAI,EAACC,UAAWC,KAClB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAAM,kBAAC,IAAD,CAAUC,MAAO,EAAGC,IAAKlB,EAAOmB,MAAOC,SAAU,IAAKC,UAAW,OAC3F,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAkB,IAAIQ,KAAKrB,GAAYsB,gBACzD,kBAACV,EAAA,EAAD,CAAaW,QAAQ,SAArB,yCA/BT,gBCCAC,EANH,WACR,OACI,sCCIOC,EANO,WAClB,OACI,8CC+BOC,E,4MAvBbC,MAAM,CACJC,MAAM,I,kMAIaC,I,OAAblC,E,OACNmC,KAAKC,SAAS,CAACH,MAAMjC,IACrBqC,QAAQC,IAAItC,G,qIAMd,OACE,yBAAKQ,UAAU,aACb,kBAAC,EAAD,CAAOD,UAAW4B,KAAKH,MAAMC,QAC7B,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAlBYM,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.605005f5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst url=\"https://covid19.mathdro.id/api\";\n\nconst fetchData = async ()=>{\n    try{\n        // const response = await axios.get(url);   // whole api object\n        const {data} = await axios.get(url); \n        \n        const modifieData={\n            confirmed:data.confirmed,\n            recovered:data.recovered,\n            deaths:data.deaths,\n            lastUpdate:data.lastUpdate\n        }\n        return modifieData;\n\n    }catch (error){\n\n    }\n} \n\nexport default fetchData;\n","import React from \"react\";\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\nimport styles from \"./Cards.module.css\";\nimport CountUp from 'react-countup';\n\nconst Cards= ({covidData:{confirmed,recovered,deaths,lastUpdate}})=>{\n    if(!confirmed){\n        return 'Loading.....';\n    }\n    \n    return(\n        <div className='container'>\n            <Grid container justify=\"center\" spacing={3}>\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography> \n                        <Typography variant=\"h5\" >\n                            <CountUp  start={0} end={confirmed.value} duration={2.5} saperator= ',' />\n                        </Typography>\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography  varient=\"body2\">Number of Active Cases of Covid19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography> \n                        <Typography variant=\"h5\" ><CountUp  start={0} end={recovered.value} duration={2.5} saperator= ',' /> </Typography>\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography  varient=\"body2\">Number of Recoveries from Covid19</Typography>\n                    </CardContent>\n                </Grid>\n\n                <Grid item component={Card}>\n                    <CardContent>\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography> \n                        <Typography variant=\"h5\" ><CountUp  start={0} end={deaths.value} duration={2.5} saperator= ',' /></Typography>\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                        <Typography  varient=\"body2\">Number of Death Caused by Covid19</Typography>\n                    </CardContent>\n                </Grid>\n\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;","import React from \"react\";\n\nconst Chart=()=>{\n    return(\n        <h1>Chart</h1>\n    )\n}\n\nexport default Chart;","import React from \"react\";\n\nconst CountryPicker = () => {\n    return(\n        <h1>CountryPicker</h1>\n    )\n}\n\nexport default CountryPicker;","import React, { Component } from 'react';\nimport './App.css';\nimport fatchData from \"./api\";\n// import Cards from \"./component/Cards/Cards\";\n// import Chart from \"./component/Chart/Chart\";\n// import CountryPicker from \"./component/CountryPicker/CountryPicker\";\n// -------------------------------------------------------------------------\n// bettr way of importing file -----------------\n\nimport {Cards,Chart,CountryPicker} from './component';\n\nclass App extends Component {\n  state={\n    covid:{},\n  }\n\n  async componentDidMount(){\n    const data = await fatchData();\n    this.setState({covid:data});\n    console.log(data);\n  }\n\n\n\n  render(){\n  return (\n    <div className=\"container\">\n      <Cards covidData={this.state.covid}/>\n      <CountryPicker/>\n      <Chart/>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["api/index.js","component/Cards/Cards.jsx","component/Chart/Chart.jsx","component/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","component/Cards/Cards.module.css"],"names":["fetchData","a","axios","get","data","modifieData","confirmed","recovered","deaths","lastUpdate","Cards","covidData","className","style","marginTop","marginBottom","marginLeft","marginRight","Grid","container","justify","spacing","item","component","Card","xm","md","cx","styles","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","saperator","Date","toDateString","varient","viewBox","height","width","speed","backgroundColor","cy","r","Chart","CountryPicker","App","state","covid","fatchData","this","setState","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.0ea1561e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\n const fetchData = async ()=>{\r\n    try{\r\n        // const response = await axios.get(url);   // whole api object\r\n        const {data} = await axios.get(url); \r\n        \r\n        const modifieData={\r\n            confirmed:data.confirmed,\r\n            recovered:data.recovered,\r\n            deaths:data.deaths,\r\n            lastUpdate:data.lastUpdate\r\n        }\r\n        return modifieData;\r\n\r\n    }catch (error){\r\n\r\n    }\r\n}\r\n\r\nexport default fetchData;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core'\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nimport ContentLoader from 'react-content-loader'\r\n\r\n\r\nconst Cards= ({covidData:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n    if(!confirmed){\r\n        // return 'Loading.....';\r\n        return(\r\n            <div>\r\n                <ContentLoader\r\n                viewBox=\"0 0 400 160\"\r\n                height={160}\r\n                width={400}\r\n                speed={0.5}\r\n                backgroundColor=\"gray\">\r\n                <circle cx=\"150\" cy=\"150\" r=\"8\" />\r\n                <circle cx=\"194\" cy=\"150\" r=\"8\" />\r\n                <circle cx=\"238\" cy=\"150\" r=\"8\" />\r\n                </ContentLoader>\r\n\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return(\r\n        <div className='container' style={{marginTop:\"50px\", marginBottom:\"50px\", marginLeft:\"0px\",marginRight:\"0px\"}}>\r\n            <Grid container justify=\"center\" spacing={3}>\r\n                <Grid item component={Card} xm={12} md={3} className={cx(styles.card , styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography> \r\n                        <Typography variant=\"h5\" style={{color:\"red\"}}>\r\n                            <CountUp  start={0} end={confirmed.value} duration={2.5} saperator= ',' />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography  varient=\"body2\">Number of Active Cases of Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xm={12} md={3} className={cx(styles.card , styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography> \r\n                        <Typography variant=\"h5\" style={{color:\"green\"}}><CountUp  start={0} end={recovered.value} duration={2.5} saperator= ',' /> </Typography>\r\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography  varient=\"body2\">Number of Recoveries from Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xm={12} md={3} className={cx(styles.card , styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography> \r\n                        <Typography variant=\"h5\" style={{color:\"red\"}}><CountUp  start={0} end={deaths.value} duration={2.5} saperator= ',' /></Typography>\r\n                        <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography  varient=\"body2\">Number of Death Caused by Covid19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from \"react\";\r\n\r\nconst Chart=()=>{\r\n    return(\r\n        <h1>Chart</h1>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React from \"react\";\r\n\r\nconst CountryPicker = () => {\r\n    return(\r\n        <h1>CountryPicker</h1>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport fatchData from \"./api\";\r\n// import Cards from \"./component/Cards/Cards\";\r\n// import Chart from \"./component/Chart/Chart\";\r\n// import CountryPicker from \"./component/CountryPicker/CountryPicker\";\r\n// -------------------------------------------------------------------------\r\n// bettr way of importing file -----------------\r\n\r\nimport {Cards,Chart,CountryPicker} from './component';\r\n\r\nclass App extends Component {\r\n  state={\r\n    covid:{},\r\n  }\r\n\r\n  async componentDidMount(){\r\n    const data = await fatchData();\r\n    this.setState({covid:data});\r\n    console.log(data);\r\n  }\r\n\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"container\">\r\n      <Cards covidData={this.state.covid}/>\r\n      <CountryPicker/>\r\n      <Chart/>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Cards_card__VdSn3\",\"infected\":\"Cards_infected__3xn9j\",\"recovered\":\"Cards_recovered__81i0G\",\"deaths\":\"Cards_deaths__2Uvem\"};"],"sourceRoot":""}